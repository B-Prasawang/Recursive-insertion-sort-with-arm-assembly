


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             DATAARR, DATA, READWRITE
    2 00000000         
    3 00000000 00000008 
              00000002 
              00000003 
              00000000 
              00000001 
              00000004 
              00000009 
              00000005 
              00000006 
              00000007 ARRAY   DCD              8,2,3,0,1,4,9,5,6,7 
                                                            ;Array for sorting
    4 00000028         
    5 00000028                 AREA             MYCODE, CODE, READONLY
    6 00000000         
    7 00000000                 ENTRY
    8 00000000                 EXPORT           main
    9 00000000         
   10 00000000         main
   11 00000000 F04F 0001       MOV              R0, #1      ;Start index
   12 00000004 EA4F 0080       LSL              R0, R0, #2
   13 00000008 F04F 010A       MOV              R1, #10     ;Size of array
   14 0000000C EA4F 0181       LSL              R1, R1, #2
   15 00000010 F000 F80F       BL               INSERTION
   16 00000014         
   17 00000014         
   18 00000014 481C            LDR              R0, =ARRAY
   19 00000016 6801            LDR              R1, [R0, #0]
   20 00000018 6842            LDR              R2, [R0, #4]
   21 0000001A 6883            LDR              R3, [R0, #8]
   22 0000001C 68C4            LDR              R4, [R0, #12]
   23 0000001E 6905            LDR              R5, [R0, #16]
   24 00000020 6946            LDR              R6, [R0, #20]
   25 00000022 6987            LDR              R7, [R0, #24]
   26 00000024 F8D0 801C       LDR              R8, [R0, #28]
   27 00000028 F8D0 9020       LDR              R9, [R0, #32]
   28 0000002C F8D0 A024       LDR              R10, [R0, #36]
   29 00000030 E028            B                STOP
   30 00000032         
   31 00000032         
   32 00000032         INSERTION
   33 00000032 B083            SUB              SP, SP, #12 ;Mov stack for keep
                                                             current parameter
   34 00000034 F8CD E008       STR              LR, [SP, #8] ;Save return addre
                                                            ss
   35 00000038 9001            STR              R0, [SP, #4] ;Save start index 
                                                            argrument
   36 0000003A 9100            STR              R1, [SP, #0] ;Save size of arra
                                                            y argrument
   37 0000003C 4288            CMP              R0, R1      ;If start index = s
                                                            ize of array
   38 0000003E D01D            BEQ              RET         ;Return to main
   39 00000040 2800            CMP              R0, #0      ;If start index = 0
                                                            
   40 00000042 D01B            BEQ              RET         ;Return to main
   41 00000044         
   42 00000044         ;Check if less than after
   43 00000044 F8DF C040       LDR              R12, =ARRAY ;Get address of arr



ARM Macro Assembler    Page 2 


                                                            ay
   44 00000048 F85C 2000       LDR              R2, [R12, R0] ;Load array[start
                                                            ] to R2
   45 0000004C F1A0 0404       SUB              R4, R0, #4  ;Get value of start
                                                            -1 in R4
   46 00000050 F85C 3004       LDR              R3, [R12, R4] ;Load array[start
                                                            -1] to R3
   47 00000054 429A            CMP              R2, R3      ;if array[start]<ar
                                                            ray[start-1]
   48 00000056 DB06            BLT              SWAP        ;swap it
   49 00000058         
   50 00000058         RECUR
   51 00000058 9801            LDR              R0, [SP, #4] ;Load start index 
                                                            from this recursion
                                                            
   52 0000005A 9900            LDR              R1, [SP, #0] ;Load size from th
                                                            is recursion
   53 0000005C F100 0004       ADD              R0, R0, #4  ;increse start  
   54 00000060 F7FF FFE7       BL               INSERTION   ;call recursion for
                                                             next number
   55 00000064 E00A            B                RET         ;return when end fu
                                                            nction
   56 00000066         
   57 00000066         SWAP
   58 00000066 4615            MOV              R5, R2      ;temp = array[start
                                                            ]
   59 00000068 F84C 3000       STR              R3, [R12, R0] ;array[start] = a
                                                            rray[start-1]
   60 0000006C F84C 5004       STR              R5, [R12, R4] ;arrar[start-1] =
                                                             temp
   61 00000070 4601            MOV              R1, R0      ;pass start to size
                                                            
   62 00000072 F1A0 0004       SUB              R0, R0, #4  ;decrese start
   63 00000076 F7FF FFDC       BL               INSERTION   ;call recursion for
                                                             prev number
   64 0000007A         
   65 0000007A E7ED            B                RECUR       ;back to current fu
                                                            nction call
   66 0000007C         
   67 0000007C         RET
   68 0000007C F8DD E008       LDR              LR, [SP, #8] ;load LR to return
                                                             caller
   69 00000080 B003            ADD              SP, SP, #12 ;pop stack
   70 00000082 46F7            MOV              PC, LR      ;set LR to PC
   71 00000084         
   72 00000084         
   73 00000084         STOP
   74 00000084 E7FE            B                STOP
   75 00000086         
   76 00000086                 END                          ;End of the program
                                                            
              00 00 00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M3 --apcs=interw
ork --depend=.\objects\insertion.d -o.\objects\insertion.o -I.\RTE\_Target_1 -I
C:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\ARM\CMS
IS\5.0.1\Device\ARM\ARMCM3\Include --predefine="__EVAL SETA 1" --predefine="__U
VISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="ARMCM3 SETA 1"
 --list=.\listings\insertion.lst insertion.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

ARRAY 00000000

Symbol: ARRAY
   Definitions
      At line 3 in file insertion.s
   Uses
      At line 18 in file insertion.s
      At line 43 in file insertion.s

DATAARR 00000000

Symbol: DATAARR
   Definitions
      At line 1 in file insertion.s
   Uses
      None
Comment: DATAARR unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

INSERTION 00000032

Symbol: INSERTION
   Definitions
      At line 32 in file insertion.s
   Uses
      At line 15 in file insertion.s
      At line 54 in file insertion.s
      At line 63 in file insertion.s

MYCODE 00000000

Symbol: MYCODE
   Definitions
      At line 5 in file insertion.s
   Uses
      None
Comment: MYCODE unused
RECUR 00000058

Symbol: RECUR
   Definitions
      At line 50 in file insertion.s
   Uses
      At line 65 in file insertion.s
Comment: RECUR used once
RET 0000007C

Symbol: RET
   Definitions
      At line 67 in file insertion.s
   Uses
      At line 38 in file insertion.s
      At line 40 in file insertion.s
      At line 55 in file insertion.s

STOP 00000084

Symbol: STOP
   Definitions
      At line 73 in file insertion.s
   Uses
      At line 29 in file insertion.s
      At line 74 in file insertion.s

SWAP 00000066

Symbol: SWAP
   Definitions
      At line 57 in file insertion.s
   Uses
      At line 48 in file insertion.s
Comment: SWAP used once
main 00000000

Symbol: main
   Definitions
      At line 10 in file insertion.s
   Uses



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 8 in file insertion.s
Comment: main used once
7 symbols
345 symbols in table
